library("swirl")
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
nxt()
sum(cars$price)
sum(cars$price)/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
nxt()
25
nxt()
19
nxt()
20
nxt()
sd(mpg.midsize)
sd(mpg.midsize)^2
cat('est')
print('test')
paste('test', 'test')
paste('test', 'test', sep='_', collapse=':')
Anybody ? there ???
?
''
install.packages("Quandl")
library(Quandl)
library(Quandl)
library(ggplot2)
data_series <- Quandl(“GOOG/NASDAQ_AAPL”, start_date=”2005-01-01”)[,c(1,5)]
my.plot <- ggplot(data=data_series, aes(x=Date, y=Close)) +
geom_line(color=”#FAB521”) + # Adding a colored line
theme(panel.background = element_rect(fill=’#393939’), panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour=’white’, size=0.1),
panel.grid.minor = element_line(colour=’white’, size=0.1)) + # modifying background color
# and grid options
xlab(“Date”) + ylab(“Closing Price”) + ggtitle(“AAPL”) # Adding titles
my.plot # Generates the plot
library(Quandl)
library(Quandl)
library(ggplot2)
data_series <- Quandl(“GOOG/NASDAQ_AAPL”, start_date=”2005-01-01”)[,c(1,5)]
my.plot <- ggplot(data=data_series, aes(x=Date, y=Close)) +
geom_line(color=”#FAB521”) + # Adding a colored line
theme(panel.background = element_rect(fill=’#393939’), panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour=’white’, size=0.1),
panel.grid.minor = element_line(colour=’white’, size=0.1)) + # modifying background color
# and grid options
xlab(“Date”) + ylab(“Closing Price”) + ggtitle(“AAPL”) # Adding titles
my.plot # Generates the plot
library(Quandl)
library(ggplot2)
data_series <- Quandl(“GOOG/NASDAQ_AAPL”, start_date=”2005-01-01”)[,c(1,5)]
my.plot <- ggplot(data=data_series, aes(x=Date, y=Close)) +
geom_line(color=”#FAB521”) + # Adding a colored line
theme(panel.background = element_rect(fill=’#393939’), panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour=’white’, size=0.1),
panel.grid.minor = element_line(colour=’white’, size=0.1)) + # modifying background color
# and grid options
xlab(“Date”) + ylab(“Closing Price”) + ggtitle(“AAPL”) # Adding titles
my.plot # Generates the plot
library(Quandl)
library(ggplot2)
data_series <- Quandl(“GOOG/NASDAQ_AAPL”, start_date=”2005-01-01”)[,c(1,5)]
library(Quandl)
library(ggplot2)
data_series <- Quandl("GOOG/NASDAQ_AAPL", start_date="2005-01-01")[,c(1,5)]
my.plot <- ggplot(data=data_series, aes(x=Date, y=Close)) +
geom_line(color=”#FAB521”) + # Adding a colored line
theme(panel.background = element_rect(fill=’#393939’), panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour=’white’, size=0.1),
panel.grid.minor = element_line(colour=’white’, size=0.1)) + # modifying background color
# and grid options
xlab("Date") + ylab("Closing Price") + ggtitle("AAPL") # Adding titles
my.plot # Generates the plot
library(Quandl)
library(ggplot2)
data_series <- Quandl("GOOG/NASDAQ_AAPL", start_date="2005-01-01")[,c(1,5)]
my.plot <- ggplot(data=data_series, aes(x=Date, y=Close)) +
geom_line(color='#FAB521') + # Adding a colored line
theme(panel.background = element_rect(fill='#393939'), panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour='white', size=0.1),
panel.grid.minor = element_line(colour='white', size=0.1)) + # modifying background color
# and grid options
xlab("Date") + ylab("Closing Price") + ggtitle("AAPL") # Adding titles
my.plot # Generates the plot
dateDowloaded <- date()
dateDowloaded
now()
date()
url()
url
con <- url("https://www.google.pl/?gfe_rd=cr&ei=H3zFU86UBMba8gft9oHgBg&gws_rd=ssl#q=sex+site:dreamviews.com")
con
google <- readLines(con)
close(con)
9182731928371239817239182731928371293817239182731298371293817239128
rt <- read.table("Downloads/666f8a7015d911e48a129fa53aabeecc.txt")
rt
rt <- scan("Downloads/666f8a7015d911e48a129fa53aabeecc.txt")
rt
library(UsingR)
library(help="UsingR")
DOTplot
DOTplot(c(1,3,4,5,3,2,4,6,6,3))
rnorm(1000)
x <- round(rnorm(1000) * 100)
x
DOTplot(x)
x
x <- sample(x,30)
DOTplot(x)
vacation
wellbeing
wellbeing[10:15]
wellbeing[10:15,]
wellbeing[10:15,c(-12,-3,-6)]
swirl()
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent,galton)
regline <- lm(child~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
lm(child~parent, galton)
fit <- lm(child~parent, galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
quit()
setwd("~/Documents/Coursera/4. Exploratory Data Analysis/Project 1/ExData_Plotting1/scripts and plots")
file = "household_power_consumption.txt"
df <- read.csv(file, sep=";", header = F, skip=66637, nrows=2879)
names(df) <- c(
"Date",
"Time",
"Global_active_power",
"Global_reactive_power",
"Voltage",
"Global_intensity",
"Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3")
df$Date <- as.Date(df$Date, "%d/%m/%Y")
df$Weekday <- format(df$Date,"%A")
h <- df$Global_active_power
hist(h,
col="red",
main="Global Active Power",
xlab="Global Active Power (kilowatts)")
dev.copy(png, "plot1.png")
def.off()
dev.off()
def.off()
dev.off()
file = "household_power_consumption.txt"
df <- read.csv(file, sep=";", header = F, skip=66637, nrows=2879)
names(df) <- c(
"Date",
"Time",
"Global_active_power",
"Global_reactive_power",
"Voltage",
"Global_intensity",
"Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3")
df$Date <- as.Date(df$Date, "%d/%m/%Y")
df$Weekday <- format(df$Date,"%A")
h <- df$Global_active_power
dev.copy(png, "plot1.png")
hist(h,
col="red",
main="Global Active Power",
xlab="Global Active Power (kilowatts)")
def.off()
file = "household_power_consumption.txt"
df <- read.csv(file, sep=";", header = F, skip=66637, nrows=2879)
names(df) <- c(
"Date",
"Time",
"Global_active_power",
"Global_reactive_power",
"Voltage",
"Global_intensity",
"Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3")
df$Date <- as.Date(df$Date, "%d/%m/%Y")
df$Weekday <- format(df$Date,"%A")
h <- df$Global_active_power
dev.copy(png, "plot1.png")
hist(h,
col="red",
main="Global Active Power",
xlab="Global Active Power (kilowatts)")
def.off()
dev.off()
